/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ToolsImport } from './routes/tools'
import { Route as SettingsImport } from './routes/settings'
import { Route as SandpackImport } from './routes/sandpack'
import { Route as MonitorImport } from './routes/monitor'
import { Route as LoginImport } from './routes/login'
import { Route as EditorImport } from './routes/editor'
import { Route as DatasourceImport } from './routes/datasource'
import { Route as DataCenterImport } from './routes/data-center'
import { Route as AiImport } from './routes/ai'
import { Route as IndexImport } from './routes/index'
import { Route as ToolsJsonActionImport } from './routes/tools/json-action'
import { Route as SettingsSystemImport } from './routes/settings/system'
import { Route as SettingsServiceConfigImport } from './routes/settings/service-config'
import { Route as SettingsProfileImport } from './routes/settings/profile'
import { Route as SettingsNotificationsImport } from './routes/settings/notifications'
import { Route as SandpackReactImport } from './routes/sandpack/react'
import { Route as SandpackNodeImport } from './routes/sandpack/node'
import { Route as MonitorServicesImport } from './routes/monitor/services'
import { Route as MonitorDatabaseImport } from './routes/monitor/database'
import { Route as EditorNovelImport } from './routes/editor/novel'
import { Route as EditorMonacoImport } from './routes/editor/monaco'
import { Route as DatasrouceSqliteImport } from './routes/datasrouce.sqlite'
import { Route as DatasourcePostgresqlImport } from './routes/datasource/postgresql'
import { Route as DatasourceMysqlImport } from './routes/datasource/mysql'
import { Route as DataCenterRxdbImport } from './routes/data-center/rxdb'
import { Route as DataCenterRxdbDatabaseImport } from './routes/data-center/rxdb/database'
import { Route as DataCenterRxdbCollectionsImport } from './routes/data-center/rxdb/collections'

// Create/Update Routes

const ToolsRoute = ToolsImport.update({
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const SandpackRoute = SandpackImport.update({
  path: '/sandpack',
  getParentRoute: () => rootRoute,
} as any)

const MonitorRoute = MonitorImport.update({
  path: '/monitor',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const EditorRoute = EditorImport.update({
  path: '/editor',
  getParentRoute: () => rootRoute,
} as any)

const DatasourceRoute = DatasourceImport.update({
  path: '/datasource',
  getParentRoute: () => rootRoute,
} as any)

const DataCenterRoute = DataCenterImport.update({
  path: '/data-center',
  getParentRoute: () => rootRoute,
} as any)

const AiRoute = AiImport.update({
  path: '/ai',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ToolsJsonActionRoute = ToolsJsonActionImport.update({
  path: '/json-action',
  getParentRoute: () => ToolsRoute,
} as any)

const SettingsSystemRoute = SettingsSystemImport.update({
  path: '/system',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsServiceConfigRoute = SettingsServiceConfigImport.update({
  path: '/service-config',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsProfileRoute = SettingsProfileImport.update({
  path: '/profile',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsNotificationsRoute = SettingsNotificationsImport.update({
  path: '/notifications',
  getParentRoute: () => SettingsRoute,
} as any)

const SandpackReactRoute = SandpackReactImport.update({
  path: '/react',
  getParentRoute: () => SandpackRoute,
} as any)

const SandpackNodeRoute = SandpackNodeImport.update({
  path: '/node',
  getParentRoute: () => SandpackRoute,
} as any)

const MonitorServicesRoute = MonitorServicesImport.update({
  path: '/services',
  getParentRoute: () => MonitorRoute,
} as any)

const MonitorDatabaseRoute = MonitorDatabaseImport.update({
  path: '/database',
  getParentRoute: () => MonitorRoute,
} as any)

const EditorNovelRoute = EditorNovelImport.update({
  path: '/novel',
  getParentRoute: () => EditorRoute,
} as any)

const EditorMonacoRoute = EditorMonacoImport.update({
  path: '/monaco',
  getParentRoute: () => EditorRoute,
} as any)

const DatasrouceSqliteRoute = DatasrouceSqliteImport.update({
  path: '/datasrouce/sqlite',
  getParentRoute: () => rootRoute,
} as any)

const DatasourcePostgresqlRoute = DatasourcePostgresqlImport.update({
  path: '/postgresql',
  getParentRoute: () => DatasourceRoute,
} as any)

const DatasourceMysqlRoute = DatasourceMysqlImport.update({
  path: '/mysql',
  getParentRoute: () => DatasourceRoute,
} as any)

const DataCenterRxdbRoute = DataCenterRxdbImport.update({
  path: '/rxdb',
  getParentRoute: () => DataCenterRoute,
} as any)

const DataCenterRxdbDatabaseRoute = DataCenterRxdbDatabaseImport.update({
  path: '/database',
  getParentRoute: () => DataCenterRxdbRoute,
} as any)

const DataCenterRxdbCollectionsRoute = DataCenterRxdbCollectionsImport.update({
  path: '/collections',
  getParentRoute: () => DataCenterRxdbRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/ai': {
      preLoaderRoute: typeof AiImport
      parentRoute: typeof rootRoute
    }
    '/data-center': {
      preLoaderRoute: typeof DataCenterImport
      parentRoute: typeof rootRoute
    }
    '/datasource': {
      preLoaderRoute: typeof DatasourceImport
      parentRoute: typeof rootRoute
    }
    '/editor': {
      preLoaderRoute: typeof EditorImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/monitor': {
      preLoaderRoute: typeof MonitorImport
      parentRoute: typeof rootRoute
    }
    '/sandpack': {
      preLoaderRoute: typeof SandpackImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/tools': {
      preLoaderRoute: typeof ToolsImport
      parentRoute: typeof rootRoute
    }
    '/data-center/rxdb': {
      preLoaderRoute: typeof DataCenterRxdbImport
      parentRoute: typeof DataCenterImport
    }
    '/datasource/mysql': {
      preLoaderRoute: typeof DatasourceMysqlImport
      parentRoute: typeof DatasourceImport
    }
    '/datasource/postgresql': {
      preLoaderRoute: typeof DatasourcePostgresqlImport
      parentRoute: typeof DatasourceImport
    }
    '/datasrouce/sqlite': {
      preLoaderRoute: typeof DatasrouceSqliteImport
      parentRoute: typeof rootRoute
    }
    '/editor/monaco': {
      preLoaderRoute: typeof EditorMonacoImport
      parentRoute: typeof EditorImport
    }
    '/editor/novel': {
      preLoaderRoute: typeof EditorNovelImport
      parentRoute: typeof EditorImport
    }
    '/monitor/database': {
      preLoaderRoute: typeof MonitorDatabaseImport
      parentRoute: typeof MonitorImport
    }
    '/monitor/services': {
      preLoaderRoute: typeof MonitorServicesImport
      parentRoute: typeof MonitorImport
    }
    '/sandpack/node': {
      preLoaderRoute: typeof SandpackNodeImport
      parentRoute: typeof SandpackImport
    }
    '/sandpack/react': {
      preLoaderRoute: typeof SandpackReactImport
      parentRoute: typeof SandpackImport
    }
    '/settings/notifications': {
      preLoaderRoute: typeof SettingsNotificationsImport
      parentRoute: typeof SettingsImport
    }
    '/settings/profile': {
      preLoaderRoute: typeof SettingsProfileImport
      parentRoute: typeof SettingsImport
    }
    '/settings/service-config': {
      preLoaderRoute: typeof SettingsServiceConfigImport
      parentRoute: typeof SettingsImport
    }
    '/settings/system': {
      preLoaderRoute: typeof SettingsSystemImport
      parentRoute: typeof SettingsImport
    }
    '/tools/json-action': {
      preLoaderRoute: typeof ToolsJsonActionImport
      parentRoute: typeof ToolsImport
    }
    '/data-center/rxdb/collections': {
      preLoaderRoute: typeof DataCenterRxdbCollectionsImport
      parentRoute: typeof DataCenterRxdbImport
    }
    '/data-center/rxdb/database': {
      preLoaderRoute: typeof DataCenterRxdbDatabaseImport
      parentRoute: typeof DataCenterRxdbImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AiRoute,
  DataCenterRoute.addChildren([
    DataCenterRxdbRoute.addChildren([
      DataCenterRxdbCollectionsRoute,
      DataCenterRxdbDatabaseRoute,
    ]),
  ]),
  DatasourceRoute.addChildren([
    DatasourceMysqlRoute,
    DatasourcePostgresqlRoute,
  ]),
  EditorRoute.addChildren([EditorMonacoRoute, EditorNovelRoute]),
  LoginRoute,
  MonitorRoute.addChildren([MonitorDatabaseRoute, MonitorServicesRoute]),
  SandpackRoute.addChildren([SandpackNodeRoute, SandpackReactRoute]),
  SettingsRoute.addChildren([
    SettingsNotificationsRoute,
    SettingsProfileRoute,
    SettingsServiceConfigRoute,
    SettingsSystemRoute,
  ]),
  ToolsRoute.addChildren([ToolsJsonActionRoute]),
  DatasrouceSqliteRoute,
])

/* prettier-ignore-end */
