/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as ToolsImport } from './routes/tools';
import { Route as SettingsImport } from './routes/settings';
import { Route as MonitorImport } from './routes/monitor';
import { Route as LoginImport } from './routes/login';
import { Route as EditorImport } from './routes/editor';
import { Route as IndexImport } from './routes/index';
import { Route as SettingsSystemImport } from './routes/settings/system';
import { Route as SettingsServiceConfigImport } from './routes/settings/service-config';
import { Route as SettingsProfileImport } from './routes/settings/profile';
import { Route as SettingsNotificationsImport } from './routes/settings/notifications';
import { Route as MonitorServicesImport } from './routes/monitor/services';
import { Route as MonitorDatabaseImport } from './routes/monitor/database';

// Create Virtual Routes

const SandpackLazyImport = createFileRoute('/sandpack')();
const DatasourceLazyImport = createFileRoute('/datasource')();
const DataCenterLazyImport = createFileRoute('/data-center')();
const AiLazyImport = createFileRoute('/ai')();
const ToolsJsonActionLazyImport = createFileRoute('/tools/json-action')();
const SandpackReactLazyImport = createFileRoute('/sandpack/react')();
const SandpackNodeLazyImport = createFileRoute('/sandpack/node')();
const EditorNovelLazyImport = createFileRoute('/editor/novel')();
const EditorMonacoLazyImport = createFileRoute('/editor/monaco')();
const DatasourceSqliteLazyImport = createFileRoute('/datasource/sqlite')();
const DatasourcePostgresqlLazyImport = createFileRoute(
  '/datasource/postgresql'
)();
const DatasourceMysqlLazyImport = createFileRoute('/datasource/mysql')();
const DataCenterRxdbLazyImport = createFileRoute('/data-center/rxdb')();
const DataCenterRxdbDatabaseLazyImport = createFileRoute(
  '/data-center/rxdb/database'
)();
const DataCenterRxdbCollectionsLazyImport = createFileRoute(
  '/data-center/rxdb/collections'
)();

// Create/Update Routes

const SandpackLazyRoute = SandpackLazyImport.update({
  path: '/sandpack',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/sandpack').then((d) => d.Route));

const DatasourceLazyRoute = DatasourceLazyImport.update({
  path: '/datasource',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/datasource').then((d) => d.Route));

const DataCenterLazyRoute = DataCenterLazyImport.update({
  path: '/data-center',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/data-center').then((d) => d.Route));

const AiLazyRoute = AiLazyImport.update({
  path: '/ai',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ai').then((d) => d.Route));

const ToolsRoute = ToolsImport.update({
  path: '/tools',
  getParentRoute: () => rootRoute,
} as any);

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any);

const MonitorRoute = MonitorImport.update({
  path: '/monitor',
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const EditorRoute = EditorImport.update({
  path: '/editor',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const ToolsJsonActionLazyRoute = ToolsJsonActionLazyImport.update({
  path: '/json-action',
  getParentRoute: () => ToolsRoute,
} as any).lazy(() => import('./routes/tools/json-action').then((d) => d.Route));

const SandpackReactLazyRoute = SandpackReactLazyImport.update({
  path: '/react',
  getParentRoute: () => SandpackLazyRoute,
} as any).lazy(() => import('./routes/sandpack/react').then((d) => d.Route));

const SandpackNodeLazyRoute = SandpackNodeLazyImport.update({
  path: '/node',
  getParentRoute: () => SandpackLazyRoute,
} as any).lazy(() => import('./routes/sandpack/node').then((d) => d.Route));

const EditorNovelLazyRoute = EditorNovelLazyImport.update({
  path: '/novel',
  getParentRoute: () => EditorRoute,
} as any).lazy(() => import('./routes/editor/novel').then((d) => d.Route));

const EditorMonacoLazyRoute = EditorMonacoLazyImport.update({
  path: '/monaco',
  getParentRoute: () => EditorRoute,
} as any).lazy(() => import('./routes/editor/monaco').then((d) => d.Route));

const DatasourceSqliteLazyRoute = DatasourceSqliteLazyImport.update({
  path: '/sqlite',
  getParentRoute: () => DatasourceLazyRoute,
} as any).lazy(() =>
  import('./routes/datasource/sqlite.lazy').then((d) => d.Route)
);

const DatasourcePostgresqlLazyRoute = DatasourcePostgresqlLazyImport.update({
  path: '/postgresql',
  getParentRoute: () => DatasourceLazyRoute,
} as any).lazy(() =>
  import('./routes/datasource/postgresql').then((d) => d.Route)
);

const DatasourceMysqlLazyRoute = DatasourceMysqlLazyImport.update({
  path: '/mysql',
  getParentRoute: () => DatasourceLazyRoute,
} as any).lazy(() => import('./routes/datasource/mysql').then((d) => d.Route));

const DataCenterRxdbLazyRoute = DataCenterRxdbLazyImport.update({
  path: '/rxdb',
  getParentRoute: () => DataCenterLazyRoute,
} as any).lazy(() => import('./routes/data-center/rxdb').then((d) => d.Route));

const SettingsSystemRoute = SettingsSystemImport.update({
  path: '/system',
  getParentRoute: () => SettingsRoute,
} as any);

const SettingsServiceConfigRoute = SettingsServiceConfigImport.update({
  path: '/service-config',
  getParentRoute: () => SettingsRoute,
} as any);

const SettingsProfileRoute = SettingsProfileImport.update({
  path: '/profile',
  getParentRoute: () => SettingsRoute,
} as any);

const SettingsNotificationsRoute = SettingsNotificationsImport.update({
  path: '/notifications',
  getParentRoute: () => SettingsRoute,
} as any);

const MonitorServicesRoute = MonitorServicesImport.update({
  path: '/services',
  getParentRoute: () => MonitorRoute,
} as any);

const MonitorDatabaseRoute = MonitorDatabaseImport.update({
  path: '/database',
  getParentRoute: () => MonitorRoute,
} as any);

const DataCenterRxdbDatabaseLazyRoute = DataCenterRxdbDatabaseLazyImport.update(
  {
    path: '/database',
    getParentRoute: () => DataCenterRxdbLazyRoute,
  } as any
).lazy(() => import('./routes/data-center/rxdb/database').then((d) => d.Route));

const DataCenterRxdbCollectionsLazyRoute =
  DataCenterRxdbCollectionsLazyImport.update({
    path: '/collections',
    getParentRoute: () => DataCenterRxdbLazyRoute,
  } as any).lazy(() =>
    import('./routes/data-center/rxdb/collections').then((d) => d.Route)
  );

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/editor': {
      preLoaderRoute: typeof EditorImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/monitor': {
      preLoaderRoute: typeof MonitorImport;
      parentRoute: typeof rootRoute;
    };
    '/settings': {
      preLoaderRoute: typeof SettingsImport;
      parentRoute: typeof rootRoute;
    };
    '/tools': {
      preLoaderRoute: typeof ToolsImport;
      parentRoute: typeof rootRoute;
    };
    '/ai': {
      preLoaderRoute: typeof AiLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/data-center': {
      preLoaderRoute: typeof DataCenterLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/datasource': {
      preLoaderRoute: typeof DatasourceLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/sandpack': {
      preLoaderRoute: typeof SandpackLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/monitor/database': {
      preLoaderRoute: typeof MonitorDatabaseImport;
      parentRoute: typeof MonitorImport;
    };
    '/monitor/services': {
      preLoaderRoute: typeof MonitorServicesImport;
      parentRoute: typeof MonitorImport;
    };
    '/settings/notifications': {
      preLoaderRoute: typeof SettingsNotificationsImport;
      parentRoute: typeof SettingsImport;
    };
    '/settings/profile': {
      preLoaderRoute: typeof SettingsProfileImport;
      parentRoute: typeof SettingsImport;
    };
    '/settings/service-config': {
      preLoaderRoute: typeof SettingsServiceConfigImport;
      parentRoute: typeof SettingsImport;
    };
    '/settings/system': {
      preLoaderRoute: typeof SettingsSystemImport;
      parentRoute: typeof SettingsImport;
    };
    '/data-center/rxdb': {
      preLoaderRoute: typeof DataCenterRxdbLazyImport;
      parentRoute: typeof DataCenterLazyImport;
    };
    '/datasource/mysql': {
      preLoaderRoute: typeof DatasourceMysqlLazyImport;
      parentRoute: typeof DatasourceLazyImport;
    };
    '/datasource/postgresql': {
      preLoaderRoute: typeof DatasourcePostgresqlLazyImport;
      parentRoute: typeof DatasourceLazyImport;
    };
    '/datasource/sqlite': {
      preLoaderRoute: typeof DatasourceSqliteLazyImport;
      parentRoute: typeof DatasourceLazyImport;
    };
    '/editor/monaco': {
      preLoaderRoute: typeof EditorMonacoLazyImport;
      parentRoute: typeof EditorImport;
    };
    '/editor/novel': {
      preLoaderRoute: typeof EditorNovelLazyImport;
      parentRoute: typeof EditorImport;
    };
    '/sandpack/node': {
      preLoaderRoute: typeof SandpackNodeLazyImport;
      parentRoute: typeof SandpackLazyImport;
    };
    '/sandpack/react': {
      preLoaderRoute: typeof SandpackReactLazyImport;
      parentRoute: typeof SandpackLazyImport;
    };
    '/tools/json-action': {
      preLoaderRoute: typeof ToolsJsonActionLazyImport;
      parentRoute: typeof ToolsImport;
    };
    '/data-center/rxdb/collections': {
      preLoaderRoute: typeof DataCenterRxdbCollectionsLazyImport;
      parentRoute: typeof DataCenterRxdbLazyImport;
    };
    '/data-center/rxdb/database': {
      preLoaderRoute: typeof DataCenterRxdbDatabaseLazyImport;
      parentRoute: typeof DataCenterRxdbLazyImport;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  EditorRoute.addChildren([EditorMonacoLazyRoute, EditorNovelLazyRoute]),
  LoginRoute,
  MonitorRoute.addChildren([MonitorDatabaseRoute, MonitorServicesRoute]),
  SettingsRoute.addChildren([
    SettingsNotificationsRoute,
    SettingsProfileRoute,
    SettingsServiceConfigRoute,
    SettingsSystemRoute,
  ]),
  ToolsRoute.addChildren([ToolsJsonActionLazyRoute]),
  AiLazyRoute,
  DataCenterLazyRoute.addChildren([
    DataCenterRxdbLazyRoute.addChildren([
      DataCenterRxdbCollectionsLazyRoute,
      DataCenterRxdbDatabaseLazyRoute,
    ]),
  ]),
  DatasourceLazyRoute.addChildren([
    DatasourceMysqlLazyRoute,
    DatasourcePostgresqlLazyRoute,
    DatasourceSqliteLazyRoute,
  ]),
  SandpackLazyRoute.addChildren([
    SandpackNodeLazyRoute,
    SandpackReactLazyRoute,
  ]),
]);

/* prettier-ignore-end */
